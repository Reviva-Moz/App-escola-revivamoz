-- ========= CRIAÇÃO DE TIPOS (ENUMS) =========
-- Estes tipos garantem que apenas valores válidos sejam inseridos em certas colunas.

CREATE TYPE public.student_status AS ENUM ('Ativo', 'Inativo');
CREATE TYPE public.teacher_status AS ENUM ('Ativo', 'Inativo');
CREATE TYPE public.transaction_type AS ENUM ('Receita', 'Despesa');
CREATE TYPE public.payment_status AS ENUM ('Pago', 'Pendente');
CREATE TYPE public.tuition_status AS ENUM ('Pago', 'Atrasado', 'Pendente');
CREATE TYPE public.scholarship_type AS ENUM ('Percentagem', 'Valor Fixo');
CREATE TYPE public.calendar_event_type AS ENUM ('Feriado', 'Evento', 'Prova', 'Prazo');

-- ========= CRIAÇÃO DAS TABELAS =========

-- Tabela de Professores
CREATE TABLE public.teachers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    phone TEXT,
    qualifications TEXT,
    status public.teacher_status DEFAULT 'Ativo'::public.teacher_status
);

-- Tabela de Turmas
CREATE TABLE public.classes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    year INT NOT NULL,
    teacher_id BIGINT REFERENCES public.teachers(id) ON DELETE SET NULL
);

-- Tabela de Alunos
CREATE TABLE public.students (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    class_id BIGINT REFERENCES public.classes(id) ON DELETE SET NULL,
    age INT,
    guardian TEXT,
    phone TEXT,
    status public.student_status DEFAULT 'Ativo'::public.student_status
);

-- Tabela de Disciplinas
CREATE TABLE public.subjects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    code TEXT UNIQUE,
    workload INT
);

-- Tabela de Ligação: Plano Curricular (Turmas <-> Disciplinas <-> Professores)
CREATE TABLE public.class_curriculum (
    class_id BIGINT NOT NULL REFERENCES public.classes(id) ON DELETE CASCADE,
    subject_id BIGINT NOT NULL REFERENCES public.subjects(id) ON DELETE CASCADE,
    teacher_id BIGINT NOT NULL REFERENCES public.teachers(id) ON DELETE CASCADE,
    PRIMARY KEY (class_id, subject_id)
);

-- Tabela de Categorias Financeiras
CREATE TABLE public.financial_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    type public.transaction_type NOT NULL
);

-- Tabela de Transações Financeiras (Livro-Razão)
CREATE TABLE public.transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL,
    description TEXT,
    type public.transaction_type NOT NULL,
    category_id BIGINT REFERENCES public.financial_categories(id) ON DELETE SET NULL,
    amount NUMERIC(10, 2) NOT NULL
);

-- Tabela de Bolsas de Estudo
CREATE TABLE public.scholarships (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    type public.scholarship_type NOT NULL,
    value NUMERIC(10, 2) NOT NULL
);

-- Tabela de Ligação: Alunos com Bolsas
CREATE TABLE public.student_scholarships (
    student_id BIGINT NOT NULL REFERENCES public.students(id) ON DELETE CASCADE,
    scholarship_id BIGINT NOT NULL REFERENCES public.scholarships(id) ON DELETE CASCADE,
    PRIMARY KEY (student_id, scholarship_id)
);

-- Tabela de Matrículas
CREATE TABLE public.enrollments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_name TEXT, -- Denormalized as per app structure. Consider FK to students.
    date DATE,
    amount NUMERIC(10, 2),
    discount NUMERIC(10, 2),
    status public.payment_status
);

-- Tabela de Mensalidades
CREATE TABLE public.tuition_fees (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id BIGINT NOT NULL REFERENCES public.students(id) ON DELETE CASCADE,
    month TEXT NOT NULL,
    due_date DATE,
    amount NUMERIC(10, 2),
    status public.tuition_status
);

-- Tabela de Notas (Estrutura relacional para o objeto aninhado)
CREATE TABLE public.grades (
    student_id BIGINT NOT NULL REFERENCES public.students(id) ON DELETE CASCADE,
    subject_id BIGINT NOT NULL REFERENCES public.subjects(id) ON DELETE CASCADE,
    nota1 NUMERIC(4, 2),
    nota2 NUMERIC(4, 2),
    final_exam NUMERIC(4, 2),
    PRIMARY KEY (student_id, subject_id)
);

-- Tabela de Eventos do Calendário
CREATE TABLE public.calendar_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    date DATE NOT NULL,
    type public.calendar_event_type NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    class_id BIGINT REFERENCES public.classes(id) ON DELETE SET NULL,
    subject_id BIGINT REFERENCES public.subjects(id) ON DELETE SET NULL
);

-- ========= HABILITAR ROW LEVEL SECURITY (RLS) =========
-- Ativa o RLS para cada tabela. Antes de criar as políticas, ninguém pode aceder a nada.

ALTER TABLE public.teachers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.classes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.students ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.subjects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.class_curriculum ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.financial_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.scholarships ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.student_scholarships ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.enrollments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tuition_fees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.grades ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.calendar_events ENABLE ROW LEVEL SECURITY;

-- ========= POLÍTICAS DE ACESSO (RLS Policies) =========
-- Concede acesso total (SELECT, INSERT, UPDATE, DELETE) para QUALQUER utilizador,
-- incluindo anónimos (usando a 'anon key'), como solicitado.

CREATE POLICY "Public full access" ON public.teachers FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.classes FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.students FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.subjects FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.class_curriculum FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.financial_categories FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.transactions FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.scholarships FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.student_scholarships FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.enrollments FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.tuition_fees FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.grades FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Public full access" ON public.calendar_events FOR ALL USING (true) WITH CHECK (true);